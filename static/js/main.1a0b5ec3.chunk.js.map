{"version":3,"sources":["components/calDisplay.js","App.js","serviceWorker.js","index.js"],"names":["Cal","props","className","onClick","maths","value","id","secondDisplay","display","App","state","sign","event","target","getAttribute","setState","prevstate","firstInput","parseFloat","isNaN","this","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"+RAsEeA,G,YAnEH,SAACC,GACZ,OACC,yBAAKC,UAAW,aACf,kFACA,yBAAKC,QAASF,EAAMG,MAAOF,UAAU,OACpC,yBAAKA,UAAU,aAAaG,MAAM,KAAlC,KAGA,yBAAKH,UAAU,YAAYG,MAAM,KAAjC,KAGA,yBAAKH,UAAU,YAAYG,MAAM,KAAjC,KAGA,yBAAKH,UAAU,YAAYG,MAAM,KAAjC,KAGA,yBAAKH,UAAU,YAAYG,MAAM,KAAjC,KAGA,yBAAKH,UAAU,YAAYG,MAAM,KAAjC,KAGA,yBAAKH,UAAU,YAAYG,MAAM,KAAjC,KAGA,yBAAKH,UAAU,YAAYG,MAAM,KAAjC,KAGA,yBAAKH,UAAU,YAAYG,MAAM,KAAjC,KAGA,yBAAKH,UAAU,YAAYG,MAAM,KAAjC,KAGA,yBAAKH,UAAU,cAAcG,MAAM,KAAnC,KAGA,yBAAKH,UAAU,cAAcG,MAAM,KAAnC,KAGA,yBAAKH,UAAU,gBAAgBG,MAAM,KAArC,KAGA,yBAAKH,UAAU,mBAAmBG,MAAM,KAAxC,KAGA,yBAAKH,UAAU,mBAAmBG,MAAM,KAAxC,KAGA,yBAAKH,UAAU,gBAAgBG,MAAM,SAArC,SAIA,yBAAKH,UAAU,kBAAkBG,MAAM,WACtC,0BAAMC,GAAG,UAAUL,EAAMM,eACzB,0BAAMD,GAAG,SAASL,EAAMO,UAGzB,yBAAKN,UAAU,iBAAiBG,MAAM,UAAtC,SCsBWI,E,2MA/EbC,MAAQ,CACNF,QAAS,GACTD,cAAe,GACfI,KAAM,I,EAGRP,MAAQ,SAAAQ,GAEN,IAAIP,EAAQO,EAAMC,OAAOC,aAAa,SAItC,OAAQT,GACN,IAAK,IACL,IAAK,IACL,IAAK,IACL,IAAK,IACH,EAAKU,UAAS,SAAAC,GACZ,MAAO,CACLL,KAAMN,EACNE,cAAeS,EAAUR,QAAUH,EACnCG,QAAS,OAGb,MACF,IAAK,SACH,IAAIS,EAAaC,WAAW,EAAKR,MAAMH,gBACvCU,EAAaE,MAAMF,IAEf,EAAKF,SAAS,CACZP,QAAS,GACTD,cAAe,GACfI,KAAM,KAER,EAAKI,UAAS,SAAAC,GACZ,MAAO,CACLT,cAAeS,EAAUT,cAAgBS,EAAUR,QACnDA,QACEU,WAAWF,EAAUT,eACrBW,WAAWF,EAAUR,aAG/B,MAEF,IAAK,QACH,EAAKO,SAAS,CACZP,QAAS,GACTD,cAAe,GACfI,KAAM,KAER,MAEF,IAAK,UAEH,MAEF,QACE,EAAKI,UAAS,SAAAC,GACZ,MAAO,CACLR,QAASQ,EAAUR,QAAUH,Q,wEAQrC,OACE,yBAAKH,UAAU,OACb,kBAAC,EAAD,CACEE,MAAOgB,KAAKhB,MACZI,QAASY,KAAKV,MAAMF,QACpBD,cAAea,KAAKV,MAAMH,qB,GAzElBc,IAAMC,WCQJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.1a0b5ec3.chunk.js","sourcesContent":["import React from 'react';\r\nimport './calDisplay.css';\r\n\r\nconst Cal = (props) => {\r\n\treturn (\r\n\t\t<div className =\"container\">\r\n\t\t\t<h1>This calculator does basic arithmetic calculations</h1>\r\n\t\t\t<div onClick={props.maths} className=\"cal\">\r\n\t\t\t\t<div className=\" box box-0\" value=\"0\">\r\n\t\t\t\t\t0\r\n\t\t\t\t</div>\r\n\t\t\t\t<div className=\"box box-1\" value=\"1\">\r\n\t\t\t\t\t1\r\n\t\t\t\t</div>\r\n\t\t\t\t<div className=\"box box-2\" value=\"2\">\r\n\t\t\t\t\t2\r\n\t\t\t\t</div>\r\n\t\t\t\t<div className=\"box box-3\" value=\"3\">\r\n\t\t\t\t\t3\r\n\t\t\t\t</div>\r\n\t\t\t\t<div className=\"box box-4\" value=\"4\">\r\n\t\t\t\t\t4\r\n\t\t\t\t</div>\r\n\t\t\t\t<div className=\"box box-5\" value=\"5\">\r\n\t\t\t\t\t5\r\n\t\t\t\t</div>\r\n\t\t\t\t<div className=\"box box-6\" value=\"6\">\r\n\t\t\t\t\t6\r\n\t\t\t\t</div>\r\n\t\t\t\t<div className=\"box box-7\" value=\"7\">\r\n\t\t\t\t\t7\r\n\t\t\t\t</div>\r\n\t\t\t\t<div className=\"box box-8\" value=\"8\">\r\n\t\t\t\t\t8\r\n\t\t\t\t</div>\r\n\t\t\t\t<div className=\"box box-9\" value=\"9\">\r\n\t\t\t\t\t9\r\n\t\t\t\t</div>\r\n\t\t\t\t<div className=\"box box-dot\" value=\".\">\r\n\t\t\t\t\t.\r\n\t\t\t\t</div>\r\n\t\t\t\t<div className=\"box box-add\" value=\"+\">\r\n\t\t\t\t\t+\r\n\t\t\t\t</div>\r\n\t\t\t\t<div className=\"box box-minus\" value=\"-\">\r\n\t\t\t\t\t-\r\n\t\t\t\t</div>\r\n\t\t\t\t<div className=\"box box-multiply\" value=\"*\">\r\n\t\t\t\t\t*\r\n\t\t\t\t</div>\r\n\t\t\t\t<div className=\"box box-division\" value=\"/\">\r\n\t\t\t\t\t/\r\n\t\t\t\t</div>\r\n\t\t\t\t<div className=\"box box-clear\" value=\"clear\">\r\n\t\t\t\t\tclear\r\n\t\t\t\t</div>\r\n\t\t\t\t{/* this is the display section of the browser */}\r\n\t\t\t\t<div className=\"box box-display\" value=\"display\">\r\n\t\t\t\t\t<span id=\"second\">{props.secondDisplay}</span>\r\n\t\t\t\t\t<span id=\"first\">{props.display}</span>\r\n\t\t\t\t</div>\r\n\r\n\t\t\t\t<div className=\"box box-equals\" value=\"equals\">\r\n\t\t\t\t\t=\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default Cal;\r\n","import React from \"react\";\r\nimport \"./App.css\";\r\nimport Cal from \"./components/calDisplay\";\r\n\r\nclass App extends React.Component {\r\n  state = {\r\n    display: \"\",\r\n    secondDisplay: \"\",\r\n    sign: \"\"\r\n  };\r\n\r\n  maths = event => {\r\n    //used getAttribue because value is not a predefined attribute of a div tag\r\n    let value = event.target.getAttribute(\"value\");\r\n\r\n    //  console.log(value)\r\n\r\n    switch (value) {\r\n      case \"+\":\r\n      case \"-\":\r\n      case \"*\":\r\n      case \"/\":\r\n        this.setState(prevstate => {\r\n          return {\r\n            sign: value,\r\n            secondDisplay: prevstate.display + value,\r\n            display: \"\"\r\n          };\r\n        });\r\n        break;\r\n      case \"equals\":\r\n        let firstInput = parseFloat(this.state.secondDisplay);\r\n        firstInput = isNaN(firstInput);\r\n        firstInput\r\n          ? this.setState({\r\n              display: \"\",\r\n              secondDisplay: \"\",\r\n              sign: \"\"\r\n            })\r\n          : this.setState(prevstate => {\r\n              return {\r\n                secondDisplay: prevstate.secondDisplay + prevstate.display,\r\n                display:\r\n                  parseFloat(prevstate.secondDisplay) +\r\n                  parseFloat(prevstate.display)\r\n              };\r\n            });\r\n        break;\r\n\r\n      case \"clear\":\r\n        this.setState({\r\n          display: \"\",\r\n          secondDisplay: \"\",\r\n          sign: \"\"\r\n        });\r\n        break;\r\n\r\n      case \"display\":\r\n        //do notting when display is selected\r\n        break;\r\n\r\n      default:\r\n        this.setState(prevstate => {\r\n          return {\r\n            display: prevstate.display + value\r\n          };\r\n        });\r\n        break;\r\n    }\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <Cal\r\n          maths={this.maths}\r\n          display={this.state.display}\r\n          secondDisplay={this.state.secondDisplay}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}