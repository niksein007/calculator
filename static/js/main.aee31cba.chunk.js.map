{"version":3,"sources":["App.js","components/calDisplay.js","serviceWorker.js","index.js"],"names":["App","state","display","secondDisplay","sign","logic","SeconDisplay","console","log","maths","event","value","target","getAttribute","setState","prevstate","eval","this","className","React","Component","Cal","props","onClick","id","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"myCAKMA,I,msBACLC,MAAO,CACPC,QAAQ,GACRC,cAAc,GACdC,KAAK,I,MAGLC,MAAM,WACL,IAAID,EAAO,MAAKH,MAAMK,aACT,MAATF,GAAyB,MAATA,GAAyB,MAATA,GAAyB,MAATA,GACnDG,QAAQC,IAAR,S,MAMAC,MAAM,SAACC,OAEL,IAAIC,MAAQD,MAAME,OAAOC,aAAa,SAKtC,OAFH,MAAKR,QAEMM,OACN,IAAK,IACJ,IAAK,IACH,IAAK,IACH,IAAK,IACT,MAAKG,UAAS,SAACC,GACb,MAAM,CACJX,KAAKO,MACLR,cAAcY,EAAUb,QAAUS,MAClCT,QAAQ,OAIX,MACA,IAAK,SACJ,MAAKY,UAAS,SAACC,WACb,MAAM,CACJZ,cAAcY,UAAUZ,cAAgBY,UAAUb,QAClDA,QAAQc,KAAKD,UAAUZ,cAAgBY,UAAUb,aAItD,MAEA,IAAK,QACH,MAAKY,SAAS,CACbZ,QAAQ,GACRC,cAAc,GACdC,KAAK,KAER,MAEA,IAAK,UAEL,MAEF,QACC,MAAKU,UAAS,SAACC,GACb,MAAO,CACLb,QAAQa,EAAUb,QAAUS,Y,oVAetC,OAHEJ,QAAQC,IAAKS,KAAKhB,MAAME,eAIxB,kEAAKe,UAAU,OACd,2DAAC,sDAAD,CAAKT,MAAOQ,KAAKR,MAChBP,QAAUe,KAAKhB,MAAMC,QACnBC,cAAiBc,KAAKhB,MAAME,qB,KAjFlBgB,6CAAMC,WAwFTpB,2B,gCC7Ff,0BAmCeqB,IAhCH,SAACC,GAET,OACI,yBAAKC,QAASD,EAAMb,MAAOS,UAAU,OACjC,yBAAKA,UAAU,aAAaP,MAAM,KAAlC,KACA,yBAAKO,UAAU,YAAYP,MAAM,KAAjC,KACA,yBAAKO,UAAU,YAAYP,MAAM,KAAjC,KACA,yBAAKO,UAAU,YAAYP,MAAM,KAAjC,KACA,yBAAKO,UAAU,YAAYP,MAAM,KAAjC,KACA,yBAAKO,UAAU,YAAYP,MAAM,KAAjC,KACA,yBAAKO,UAAU,YAAYP,MAAM,KAAjC,KACA,yBAAKO,UAAU,YAAYP,MAAM,KAAjC,KACA,yBAAKO,UAAU,YAAYP,MAAM,KAAjC,KACA,yBAAKO,UAAU,YAAYP,MAAM,KAAjC,KACA,yBAAKO,UAAU,cAAcP,MAAM,KAAnC,KACA,yBAAKO,UAAU,cAAcP,MAAM,KAAnC,KACA,yBAAKO,UAAU,gBAAgBP,MAAM,KAArC,KACA,yBAAKO,UAAU,mBAAmBP,MAAM,KAAxC,KACA,yBAAKO,UAAU,mBAAmBP,MAAM,KAAxC,KACA,yBAAKO,UAAU,gBAAgBP,MAAM,SAArC,SAEA,yBAAKO,UAAU,kBAAkBP,MAAM,WACvC,0BAAMa,GAAG,UAAUF,EAAMnB,eACzB,0BAAMqB,GAAG,SAASF,EAAMpB,UAGxB,yBAAKgB,UAAU,iBAAiBP,MAAM,UAAtC,Q,oLCjBQc,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC/B,EAAA,EAAD,MAASgC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLlC,QAAQkC,MAAMA,EAAMC,c","file":"static/js/main.aee31cba.chunk.js","sourcesContent":["import React from 'react';\r\nimport './App.css';\r\nimport Cal from './components/calDisplay'\r\n\r\n\r\nclass App extends React.Component {\r\n state ={\r\n display:\"\",\r\n secondDisplay:\"\",\r\n sign:\"\"\r\n }\r\n\r\n logic=()=>{\r\n  let sign = this.state.SeconDisplay\r\n  if (sign === \"+\" || sign === \"-\" || sign === \"/\" || sign === \"*\" ) {\r\n   console.log(`mark`)\r\n    \r\n  }\r\n  \r\n \r\n}\r\n   maths=(event)=>{\r\n     //used getAttribue because value is not a predefined attribute of a div tag\r\n     let value = event.target.getAttribute(\"value\")\r\n   \r\n    //  console.log(value)\r\n  this.logic()\r\n\r\n     switch (value) {\r\n       case \"+\":\r\n        case \"-\":\r\n          case \"*\":\r\n            case \"/\":\r\n        this.setState((prevstate)=>{\r\n          return{\r\n            sign:value,\r\n            secondDisplay:prevstate.display + value,\r\n            display:\"\"\r\n          \r\n          }\r\n        })\r\n         break;\r\n         case \"equals\":\r\n          this.setState((prevstate)=>{\r\n            return{\r\n              secondDisplay:prevstate.secondDisplay + prevstate.display,\r\n              display:eval(prevstate.secondDisplay + prevstate.display)\r\n            \r\n            }\r\n          })\r\n         break;\r\n\r\n         case \"clear\":\r\n           this.setState({\r\n            display:\"\",\r\n            secondDisplay:\"\",\r\n            sign:\"\"\r\n           })\r\n         break;\r\n\r\n         case \"display\":\r\n          //do notting when display is selected\r\n         break;\r\n     \r\n       default:\r\n        this.setState((prevstate)=>{\r\n          return {\r\n            display:prevstate.display + value\r\n          }\r\n        })\r\n         break;\r\n     }\r\n\r\n   }\r\n    \r\n\r\n  render(){\r\n    \r\n    // console.log(this.state.sign)\r\n    console.log((this.state.secondDisplay))\r\n    // console.log(parseFloat(this.state.display))\r\n\r\n  return (\r\n    <div className=\"App\">\r\n     <Cal maths={this.maths}\r\n      display ={this.state.display}\r\n        secondDisplay = {this.state.secondDisplay}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n}\r\n\r\nexport default App;\r\n","import React from 'react'\r\nimport './calDisplay.css'\r\n\r\nconst Cal = (props)=>{\r\n\r\n    return(\r\n        <div onClick={props.maths} className=\"cal\">\r\n            <div className=\" box box-0\" value=\"0\">0</div>\r\n            <div className=\"box box-1\" value=\"1\">1</div>\r\n            <div className=\"box box-2\" value=\"2\">2</div>\r\n            <div className=\"box box-3\" value=\"3\">3</div>\r\n            <div className=\"box box-4\" value=\"4\">4</div>\r\n            <div className=\"box box-5\" value=\"5\">5</div>\r\n            <div className=\"box box-6\" value=\"6\">6</div>\r\n            <div className=\"box box-7\" value=\"7\">7</div>\r\n            <div className=\"box box-8\" value=\"8\">8</div>\r\n            <div className=\"box box-9\" value=\"9\">9</div>\r\n            <div className=\"box box-dot\" value=\".\">.</div>\r\n            <div className=\"box box-add\" value=\"+\">+</div>\r\n            <div className=\"box box-minus\" value=\"-\">-</div>\r\n            <div className=\"box box-multiply\" value=\"*\">*</div>\r\n            <div className=\"box box-division\" value=\"/\">/</div>\r\n            <div className=\"box box-clear\" value=\"clear\">clear</div>\r\n                        {/* this is the display section of the browser */}\r\n            <div className=\"box box-display\" value=\"display\">\r\n            <span id=\"second\">{props.secondDisplay}</span>\r\n            <span id=\"first\">{props.display}</span>\r\n            </div>\r\n\r\n            <div className=\"box box-equals\" value=\"equals\">=</div>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default Cal","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}