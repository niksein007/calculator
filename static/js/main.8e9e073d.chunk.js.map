{"version":3,"sources":["components/calDisplay.js","App.js","serviceWorker.js","index.js"],"names":["Cal","props","onClick","maths","className","value","id","secondDisplay","display","App","state","sign","event","target","getAttribute","setState","prevstate","firstInput","parseFloat","isNaN","console","log","this","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"+RAmCeA,G,YAhCH,SAACC,GAET,OACI,yBAAKC,QAASD,EAAME,MAAOC,UAAU,OACjC,yBAAKA,UAAU,aAAaC,MAAM,KAAlC,KACA,yBAAKD,UAAU,YAAYC,MAAM,KAAjC,KACA,yBAAKD,UAAU,YAAYC,MAAM,KAAjC,KACA,yBAAKD,UAAU,YAAYC,MAAM,KAAjC,KACA,yBAAKD,UAAU,YAAYC,MAAM,KAAjC,KACA,yBAAKD,UAAU,YAAYC,MAAM,KAAjC,KACA,yBAAKD,UAAU,YAAYC,MAAM,KAAjC,KACA,yBAAKD,UAAU,YAAYC,MAAM,KAAjC,KACA,yBAAKD,UAAU,YAAYC,MAAM,KAAjC,KACA,yBAAKD,UAAU,YAAYC,MAAM,KAAjC,KACA,yBAAKD,UAAU,cAAcC,MAAM,KAAnC,KACA,yBAAKD,UAAU,cAAcC,MAAM,KAAnC,KACA,yBAAKD,UAAU,gBAAgBC,MAAM,KAArC,KACA,yBAAKD,UAAU,mBAAmBC,MAAM,KAAxC,KACA,yBAAKD,UAAU,mBAAmBC,MAAM,KAAxC,KACA,yBAAKD,UAAU,gBAAgBC,MAAM,SAArC,SAEA,yBAAKD,UAAU,kBAAkBC,MAAM,WACvC,0BAAMC,GAAG,UAAUL,EAAMM,eACzB,0BAAMD,GAAG,SAASL,EAAMO,UAGxB,yBAAKJ,UAAU,iBAAiBC,MAAM,UAAtC,QCoEGI,E,2MA3FdC,MAAO,CACPF,QAAQ,GACRD,cAAc,GACdI,KAAK,I,EAOHR,MAAM,SAACS,GAGL,IAAIP,EAAQO,EAAMC,OAAOC,aAAa,SAItC,OAAQT,GACN,IAAK,IACJ,IAAK,IACH,IAAK,IACH,IAAK,IACT,EAAKU,UAAS,SAACC,GACb,MAAM,CACJL,KAAKN,EACLE,cAAcS,EAAUR,QAAUH,EAClCG,QAAQ,OAIX,MACA,IAAK,SACH,IAAIS,EAAaC,WAAW,EAAKR,MAAMH,gBACvCU,EAAYE,MAAMF,IAEN,EAAKF,SAAS,CACzBP,QAAQ,GACJD,cAAc,GACdI,KAAK,KAGX,EAAKI,UAAS,SAACC,GACb,MAAM,CACJT,cAAcS,EAAUT,cAAgBS,EAAUR,QAClDA,QAAQU,WAAWF,EAAUT,eAAiBW,WAAWF,EAAUR,aAIxE,MAEA,IAAK,QACH,EAAKO,SAAS,CACbP,QAAQ,GACRD,cAAc,GACdI,KAAK,KAER,MAEA,IAAK,UAEL,MAEF,QACC,EAAKI,UAAS,SAACC,GACb,MAAO,CACLR,QAAQQ,EAAUR,QAAUH,Q,wEAetC,OAHEe,QAAQC,IAAKC,KAAKZ,MAAMH,eAIxB,yBAAKH,UAAU,OACd,kBAAC,EAAD,CAAKD,MAAOmB,KAAKnB,MAChBK,QAAUc,KAAKZ,MAAMF,QACnBD,cAAiBe,KAAKZ,MAAMH,qB,GArFlBgB,IAAMC,WCOJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLrB,QAAQqB,MAAMA,EAAMC,c","file":"static/js/main.8e9e073d.chunk.js","sourcesContent":["import React from 'react'\nimport './calDisplay.css'\n\nconst Cal = (props)=>{\n\n    return(\n        <div onClick={props.maths} className=\"cal\">\n            <div className=\" box box-0\" value=\"0\">0</div>\n            <div className=\"box box-1\" value=\"1\">1</div>\n            <div className=\"box box-2\" value=\"2\">2</div>\n            <div className=\"box box-3\" value=\"3\">3</div>\n            <div className=\"box box-4\" value=\"4\">4</div>\n            <div className=\"box box-5\" value=\"5\">5</div>\n            <div className=\"box box-6\" value=\"6\">6</div>\n            <div className=\"box box-7\" value=\"7\">7</div>\n            <div className=\"box box-8\" value=\"8\">8</div>\n            <div className=\"box box-9\" value=\"9\">9</div>\n            <div className=\"box box-dot\" value=\".\">.</div>\n            <div className=\"box box-add\" value=\"+\">+</div>\n            <div className=\"box box-minus\" value=\"-\">-</div>\n            <div className=\"box box-multiply\" value=\"*\">*</div>\n            <div className=\"box box-division\" value=\"/\">/</div>\n            <div className=\"box box-clear\" value=\"clear\">clear</div>\n                        {/* this is the display section of the browser */}\n            <div className=\"box box-display\" value=\"display\">\n            <span id=\"second\">{props.secondDisplay}</span>\n            <span id=\"first\">{props.display}</span>\n            </div>\n\n            <div className=\"box box-equals\" value=\"equals\">=</div>\n        </div>\n    )\n}\n\n\nexport default Cal","import React from 'react';\nimport './App.css';\nimport Cal from './components/calDisplay'\n\n\nclass App extends React.Component {\n state ={\n display:\"\",\n secondDisplay:\"\",\n sign:\"\"\n }\n\n\n  \n \n\n   maths=(event)=>{\n     \n     //used getAttribue because value is not a predefined attribute of a div tag\n     let value = event.target.getAttribute(\"value\")\n   \n    //  console.log(value)\n\n     switch (value) {\n       case \"+\":\n        case \"-\":\n          case \"*\":\n            case \"/\":\n        this.setState((prevstate)=>{\n          return{\n            sign:value,\n            secondDisplay:prevstate.display + value,\n            display:\"\"\n          \n          }\n        })\n         break;\n         case \"equals\":\n           let firstInput = parseFloat(this.state.secondDisplay)\n           firstInput =isNaN(firstInput)\n          //  let secondInput = parseFloat(this.state.display)\n          firstInput ? this.setState({\n            display:\"\",\n                secondDisplay:\"\",\n                sign:\"\"\n          }):\n           \n          this.setState((prevstate)=>{\n            return{\n              secondDisplay:prevstate.secondDisplay + prevstate.display,\n              display:parseFloat(prevstate.secondDisplay) + parseFloat(prevstate.display)\n          }\n        }\n          )\n         break;\n\n         case \"clear\":\n           this.setState({\n            display:\"\",\n            secondDisplay:\"\",\n            sign:\"\"\n           })\n         break;\n\n         case \"display\":\n          //do notting when display is selected\n         break;\n     \n       default:\n        this.setState((prevstate)=>{\n          return {\n            display:prevstate.display + value\n          }\n        })\n         break;\n     }\n\n   }\n    \n\n  render(){\n    \n    // console.log(this.state.sign)\n    console.log((this.state.secondDisplay))\n    // console.log(parseFloat(this.state.display))\n\n  return (\n    <div className=\"App\">\n     <Cal maths={this.maths}\n      display ={this.state.display}\n        secondDisplay = {this.state.secondDisplay}\n      />\n    </div>\n  );\n}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}