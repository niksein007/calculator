{"version":3,"sources":["App.js","components/calDisplay.js","serviceWorker.js","index.js"],"names":["App","state","display","secondDisplay","sign","maths","event","value","target","getAttribute","setState","prevstate","firstInput","parseFloat","isNaN","eval","className","this","React","Component","Cal","props","onClick","id","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"+wCAIMA,I,urBACJC,MAAQ,CACNC,QAAS,GACTC,cAAe,GACfC,KAAM,I,MAGRC,MAAQ,SAAAC,OAEN,IAAIC,MAAQD,MAAME,OAAOC,aAAa,SAItC,OAAQF,OACN,IAAK,IACL,IAAK,IACL,IAAK,IACL,IAAK,IACH,MAAKG,UAAS,SAAAC,GACZ,MAAO,CACLP,KAAMG,MACNJ,cAAeQ,EAAUT,QAAUK,MACnCL,QAAS,OAGb,MACF,IAAK,SACH,IAAIU,WAAaC,WAAW,MAAKZ,MAAME,eACvCS,WAAaE,MAAMF,YACnBA,WACI,MAAKF,SAAS,CACZR,QAAS,GACTC,cAAe,GACfC,KAAM,KAER,MAAKM,UAAS,SAAAC,WACZ,MAAO,CACLR,cAAeQ,UAAUR,cAAgBQ,UAAUT,QACnDA,QACIa,KAAMF,WAAWF,UAAUR,eAAiBQ,UAAUP,KAAOS,WAAWF,UAAUT,cAI9F,MAEF,IAAK,QACH,MAAKQ,SAAS,CACZR,QAAS,GACTC,cAAe,GACfC,KAAM,KAER,MAEF,IAAK,UAEH,MAEF,QACE,MAAKM,UAAS,SAAAC,GACZ,MAAO,CACLT,QAASS,EAAUT,QAAUK,Y,4UAQrC,OACE,kEAAKS,UAAU,OACb,2DAAC,sDAAD,CACEX,MAAOY,KAAKZ,MACZH,QAASe,KAAKhB,MAAMC,QACpBC,cAAec,KAAKhB,MAAME,qB,KAzElBe,6CAAMC,WAgFTnB,2B,gCCpFf,0BAsEeoB,IAnEH,SAACC,GACZ,OACC,yBAAKL,UAAW,aACf,kFACA,yBAAKM,QAASD,EAAMhB,MAAOW,UAAU,OACpC,yBAAKA,UAAU,aAAaT,MAAM,KAAlC,KAGA,yBAAKS,UAAU,YAAYT,MAAM,KAAjC,KAGA,yBAAKS,UAAU,YAAYT,MAAM,KAAjC,KAGA,yBAAKS,UAAU,YAAYT,MAAM,KAAjC,KAGA,yBAAKS,UAAU,YAAYT,MAAM,KAAjC,KAGA,yBAAKS,UAAU,YAAYT,MAAM,KAAjC,KAGA,yBAAKS,UAAU,YAAYT,MAAM,KAAjC,KAGA,yBAAKS,UAAU,YAAYT,MAAM,KAAjC,KAGA,yBAAKS,UAAU,YAAYT,MAAM,KAAjC,KAGA,yBAAKS,UAAU,YAAYT,MAAM,KAAjC,KAGA,yBAAKS,UAAU,cAAcT,MAAM,KAAnC,KAGA,yBAAKS,UAAU,cAAcT,MAAM,KAAnC,KAGA,yBAAKS,UAAU,gBAAgBT,MAAM,KAArC,KAGA,yBAAKS,UAAU,mBAAmBT,MAAM,KAAxC,KAGA,yBAAKS,UAAU,mBAAmBT,MAAM,KAAxC,KAGA,yBAAKS,UAAU,gBAAgBT,MAAM,SAArC,SAIA,yBAAKS,UAAU,kBAAkBT,MAAM,WACtC,0BAAMgB,GAAG,UAAUF,EAAMlB,eACzB,0BAAMoB,GAAG,SAASF,EAAMnB,UAGzB,yBAAKc,UAAU,iBAAiBT,MAAM,UAAtC,S,oLClDgBiB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC9B,EAAA,EAAD,MAAS+B,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.616ae680.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./App.css\";\nimport Cal from \"./components/calDisplay\";\n\nclass App extends React.Component {\n  state = {\n    display: \"\",\n    secondDisplay: \"\",\n    sign: \"\"\n  };\n\n  maths = event => {\n    //used getAttribue because value is not a predefined attribute of a div tag\n    let value = event.target.getAttribute(\"value\");\n\n    //  console.log(value)\n\n    switch (value) {\n      case \"+\":\n      case \"-\":\n      case \"*\":\n      case \"/\":\n        this.setState(prevstate => {\n          return {\n            sign: value,\n            secondDisplay: prevstate.display + value,\n            display: \"\"\n          };\n        });\n        break;\n      case \"equals\":\n        let firstInput = parseFloat(this.state.secondDisplay);\n        firstInput = isNaN(firstInput);\n        firstInput\n          ? this.setState({\n              display: \"\",\n              secondDisplay: \"\",\n              sign: \"\"\n            })\n          : this.setState(prevstate => {\n              return {\n                secondDisplay: prevstate.secondDisplay + prevstate.display,\n                display:\n                    eval (parseFloat(prevstate.secondDisplay) + prevstate.sign + parseFloat(prevstate.display))\n                  \n              };\n            });\n        break;\n\n      case \"clear\":\n        this.setState({\n          display: \"\",\n          secondDisplay: \"\",\n          sign: \"\"\n        });\n        break;\n\n      case \"display\":\n        //do notting when display is selected\n        break;\n\n      default:\n        this.setState(prevstate => {\n          return {\n            display: prevstate.display + value\n          };\n        });\n        break;\n    }\n  };\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Cal\n          maths={this.maths}\n          display={this.state.display}\n          secondDisplay={this.state.secondDisplay}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport './calDisplay.css';\n\nconst Cal = (props) => {\n\treturn (\n\t\t<div className =\"container\">\n\t\t\t<h1>This calculator does basic arithmetic calculations</h1>\n\t\t\t<div onClick={props.maths} className=\"cal\">\n\t\t\t\t<div className=\" box box-0\" value=\"0\">\n\t\t\t\t\t0\n\t\t\t\t</div>\n\t\t\t\t<div className=\"box box-1\" value=\"1\">\n\t\t\t\t\t1\n\t\t\t\t</div>\n\t\t\t\t<div className=\"box box-2\" value=\"2\">\n\t\t\t\t\t2\n\t\t\t\t</div>\n\t\t\t\t<div className=\"box box-3\" value=\"3\">\n\t\t\t\t\t3\n\t\t\t\t</div>\n\t\t\t\t<div className=\"box box-4\" value=\"4\">\n\t\t\t\t\t4\n\t\t\t\t</div>\n\t\t\t\t<div className=\"box box-5\" value=\"5\">\n\t\t\t\t\t5\n\t\t\t\t</div>\n\t\t\t\t<div className=\"box box-6\" value=\"6\">\n\t\t\t\t\t6\n\t\t\t\t</div>\n\t\t\t\t<div className=\"box box-7\" value=\"7\">\n\t\t\t\t\t7\n\t\t\t\t</div>\n\t\t\t\t<div className=\"box box-8\" value=\"8\">\n\t\t\t\t\t8\n\t\t\t\t</div>\n\t\t\t\t<div className=\"box box-9\" value=\"9\">\n\t\t\t\t\t9\n\t\t\t\t</div>\n\t\t\t\t<div className=\"box box-dot\" value=\".\">\n\t\t\t\t\t.\n\t\t\t\t</div>\n\t\t\t\t<div className=\"box box-add\" value=\"+\">\n\t\t\t\t\t+\n\t\t\t\t</div>\n\t\t\t\t<div className=\"box box-minus\" value=\"-\">\n\t\t\t\t\t-\n\t\t\t\t</div>\n\t\t\t\t<div className=\"box box-multiply\" value=\"*\">\n\t\t\t\t\t*\n\t\t\t\t</div>\n\t\t\t\t<div className=\"box box-division\" value=\"/\">\n\t\t\t\t\t/\n\t\t\t\t</div>\n\t\t\t\t<div className=\"box box-clear\" value=\"clear\">\n\t\t\t\t\tclear\n\t\t\t\t</div>\n\t\t\t\t{/* this is the display section of the browser */}\n\t\t\t\t<div className=\"box box-display\" value=\"display\">\n\t\t\t\t\t<span id=\"second\">{props.secondDisplay}</span>\n\t\t\t\t\t<span id=\"first\">{props.display}</span>\n\t\t\t\t</div>\n\n\t\t\t\t<div className=\"box box-equals\" value=\"equals\">\n\t\t\t\t\t=\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\t);\n};\n\nexport default Cal;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}